/*
 * Copyright (c) 2011 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.api.client.auth.oauth2;

import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.util.Key;
import com.google.common.base.Preconditions;

/**
 * OAuth 2.0 request for an access token based on an authorization code as specified in <a
 * href="http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-4.1.3">Access Token Request</a>.
 * 
 * <p>
 * Samples usage:
 * </p>
 * 
 * <pre>
  static void requestAccessToken() throws IOException {
    try {
      TokenResponse response =
          new AuthorizationCodeTokenRequest(new NetHttpTransport(), new JacksonFactory(),
              new GenericUrl("https://server.example.com/token"), "SplxlOBeZQQYbYS6WxSbIA")
              .setRedirectUrl(new GenericUrl("https://client.example.com/cb"))
              .setRequestInitializer(
                  new BasicAuthentication("s6BhdRkqt3", "7Fjfp0ZBr1KtDRbnfVdmIw")).execute();
      System.out.println("Access token: " + response.accessToken);
    } catch (HttpResponseException e) {
      AccessTokenErrorResponse response = e.getResponse().parseAs(AccessTokenErrorResponse.class);
      System.out.println("Error: " + response.error);
    }
  }
 * </pre>
 * TODO(yanivi): show example for setting client_id and client_secret as content parameters
 * 
 * @since 1.7
 * @author Yaniv Inbar
 */
public class AuthorizationCodeTokenRequest extends TokenRequest {

  /** Authorization code received from the authorization server or {@code null} for none. */
  @Key
  private String code;

  /**
   * Redirect URL parameter matching the redirect URL parameter in the authorization request or
   * {@code null} for none.
   */
  @Key("redirect_uri")
  private GenericUrl redirectUrl;

  /**
   * @param transport HTTP transport
   * @param jsonFactory JSON factory
   * @param tokenServerUrl token server URL
   * @param code authorization code generated by the authorization server
   */
  public AuthorizationCodeTokenRequest(HttpTransport transport, JsonFactory jsonFactory,
      GenericUrl tokenServerUrl, String code) {
    super(transport, jsonFactory, tokenServerUrl, "authorization_code");
    setCode(code);
  }

  @Override
  public AuthorizationCodeTokenRequest setRequestInitializer(
      HttpRequestInitializer requestInitializer) {
    return (AuthorizationCodeTokenRequest) super.setRequestInitializer(requestInitializer);
  }

  @Override
  public AuthorizationCodeTokenRequest setTokenServerUrl(GenericUrl tokenServerUrl) {
    return (AuthorizationCodeTokenRequest) super.setTokenServerUrl(tokenServerUrl);
  }

  @Override
  public AuthorizationCodeTokenRequest setScopes(String... scopes) {
    return (AuthorizationCodeTokenRequest) super.setScopes(scopes);
  }

  @Override
  public AuthorizationCodeTokenRequest setGrantType(String grantType) {
    return (AuthorizationCodeTokenRequest) super.setGrantType(grantType);
  }

  /** Returns the authorization code generated by the authorization server. */
  public final String getCode() {
    return code;
  }

  /**
   * Sets the authorization code generated by the authorization server.
   * 
   * <p>
   * Overriding is only supported for the purpose of calling the super implementation and changing
   * the return type, but nothing else.
   * </p>
   */
  public AuthorizationCodeTokenRequest setCode(String code) {
    this.code = Preconditions.checkNotNull(code);
    return this;
  }

  /**
   * Returns the redirect URL parameter matching the redirect URL parameter in the authorization
   * request or {@code null} for none.
   */
  public final GenericUrl getRedirectUrl() {
    return redirectUrl;
  }

  /**
   * Sets the redirect URL parameter matching the redirect URL parameter in the authorization
   * request or {@code null} for none.
   * 
   * <p>
   * Overriding is only supported for the purpose of calling the super implementation and changing
   * the return type, but nothing else.
   * </p>
   */
  public AuthorizationCodeTokenRequest setRedirectUrl(GenericUrl redirectUrl) {
    this.redirectUrl = redirectUrl;
    Preconditions.checkArgument(redirectUrl.getFragment() == null);
    return this;
  }
}
